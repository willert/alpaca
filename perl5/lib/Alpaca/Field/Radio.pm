# This is an autogenerated file. Do not modify!

package Alpaca::Field::Radio;

use Moose;
use Types::Standard qw(:all);
BEGIN { extends 'Alpaca::Field' };

has title => (
  is => 'ro',
  traits => [qw/ AlpacaSchema /],
  description => 'Short description of the property.',
  isa => Str,
);

has description => (
  is => 'ro',
  traits => [qw/ AlpacaSchema /],
  description => 'Detailed description of the property.',
  isa => Str,
);

has readonly => (
  is => 'ro',
  traits => [qw/ AlpacaSchema /],
  description => 'Property will be readonly if true.',
  isa => Bool,
);

has required => (
  is => 'ro',
  traits => [qw/ AlpacaSchema /],
  description => 'Property value must be set if true.',
  isa => Bool,
);

has default => (
  is => 'ro',
  traits => [qw/ AlpacaSchema /],
  description => 'Default value of the property.',
  isa => Any,
);

has type => (
  is => 'ro',
  traits => [qw/ AlpacaSchema /],
  description => 'Data type of the property.',
  isa => Str,
);

has format => (
  is => 'ro',
  traits => [qw/ AlpacaSchema /],
  description => 'Data format of the property.',
  isa => Str,
);

has disallow => (
  is => 'ro',
  traits => [qw/ AlpacaSchema /],
  description => 'List of disallowed values for the property.',
  isa => ArrayRef,
);

has dependencies => (
  is => 'ro',
  traits => [qw/ AlpacaSchema /],
  description => 'List of property dependencies.',
  isa => ArrayRef,
);

has enum => (
  is => 'ro',
  traits => [qw/ AlpacaSchema /],
  description => 'List of field value options',
  isa => ArrayRef,
);

has form => (
  is => 'ro',
  traits => [qw/ AlpacaOption /],
  description => 'Options for rendering the FORM tag.',
  isa => Object,
);

has id => (
  is => 'ro',
  traits => [qw/ AlpacaOption /],
  description => 'Unique field id. Auto-generated if not provided.',
  isa => Str,
);

has type => (
  is => 'ro',
  traits => [qw/ AlpacaOption /],
  description => 'Field type.',
  isa => Str,
  default => 'radio',
);

has validate => (
  is => 'ro',
  traits => [qw/ AlpacaOption /],
  description => 'Field validation is required if true.',
  isa => Bool,
  default => 1,
);

has showMessages => (
  is => 'ro',
  traits => [qw/ AlpacaOption /],
  description => 'Display validation messages if true.',
  isa => Bool,
  default => 1,
);

has disabled => (
  is => 'ro',
  traits => [qw/ AlpacaOption /],
  description => 'Field will be disabled if true.',
  isa => Bool,
);

has readonly => (
  is => 'ro',
  traits => [qw/ AlpacaOption /],
  description => 'Field will be readonly if true.',
  isa => Bool,
);

has hidden => (
  is => 'ro',
  traits => [qw/ AlpacaOption /],
  description => 'Field will be hidden if true.',
  isa => Bool,
);

has label => (
  is => 'ro',
  traits => [qw/ AlpacaOption /],
  description => 'Field label.',
  isa => Str,
);

has helper => (
  is => 'ro',
  traits => [qw/ AlpacaOption /],
  description => 'Field help message.',
  isa => Str,
);

has fieldClass => (
  is => 'ro',
  traits => [qw/ AlpacaOption /],
  description => 'Specifies one or more CSS classes that should be applied to the dom element for this field once it is rendered.  Supports a single value, comma-delimited values, space-delimited values or values passed in as an array.',
  isa => Str,
);

has hideInitValidationError => (
  is => 'ro',
  traits => [qw/ AlpacaOption /],
  description => 'Hide initial validation errors if true.',
  isa => Bool,
);

has focus => (
  is => 'ro',
  traits => [qw/ AlpacaOption /],
  description => 'If true, the initial focus for the form will be set to the first child element (usually the first field in the form).  If a field name or path is provided, then the specified child field will receive focus.  For example, you might set focus to \'name\' (selecting the \'name\' field) or you might set it to \'client/name\' which picks the \'name\' field on the \'client\' object.',
  default => 1,
);

has optionLabels => (
  is => 'ro',
  traits => [qw/ AlpacaOption /],
  description => 'Labels for options. It can either be a map object or an array field that maps labels to items defined by enum schema property one by one.',
  isa => ArrayRef,
);

has view => (
  is => 'ro',
  traits => [qw/ AlpacaOption /],
  description => 'Allows for this field to be rendered with a different view (such as \'display\' or \'create\')',
  isa => Str,
);

has name => (
  is => 'ro',
  traits => [qw/ AlpacaOption /],
  description => 'Field name.',
  isa => Str,
);

has dataSource => (
  is => 'ro',
  traits => [qw/ AlpacaOption /],
  description => 'Datasource for generating list of options.  This can be a string or a function.  If a string, it is considered to be a URI to a service that produces a object containing key/value pairs or an array of elements of structure {\'text\': \'\', \'value\': \'\'}.  This can also be a function that is called to produce the same list.',
  isa => Str,
);

has removeDefaultNone => (
  is => 'ro',
  traits => [qw/ AlpacaOption /],
  description => 'If true, the default \'None\' option will not be shown.',
  isa => Bool,
);

has emptySelectFirst => (
  is => 'ro',
  traits => [qw/ AlpacaOption /],
  description => 'If the data is empty, then automatically select the first item in the list.',
  isa => Bool,
);

has vertical => (
  is => 'ro',
  traits => [qw/ AlpacaOption /],
  description => 'When true, the radio selector items will be stacked vertically and not horizontally',
  isa => Bool,
);



__PACKAGE__->meta->make_immutable;
no Moose;

1;
